#
# Basic yaml code to get the ESP32-2432S028R display to work in ESPHome.
#
# This yaml displays four rectangles acting as binary touch sensors inside of Home Assistant.
#
# Originally written by Jonny Bergdahl
# - [GitHub](https://github.com/jonnybergdahl)
# - [Twitter](https://twitter.com/jonnybergdahl)
# - [YouTube](https://www.youtube.com/jonnybergdahl)
#
# ============================================================ 
# NOTE:
# In order for this to work you need to add the following settings in your secrets.yaml file:
# - api_key
# - ota_password
# - wifi_ssid
# - wifi_password
# - ap_password
#
# Create a folder named fonts in your ESPHome folder, and copy the file fonts/Arimo-Regular.ttf there.
#
# ============================================================ 
# Example file setup
# Change the naming below, they will be the names used in Home Assistant
#
substitutions:
  device_name: esphome-web-7a995c
  friendly_name: Kitchen CYD

# ============================================================ 
# Standard ESPHome setup
#
# ESPHome naming
esphome:
  name: $device_name
  friendly_name: $friendly_name
 
# The ESP32-2432S028R uses a standard ESP32-WROVER, so we use the esp32dev defintion
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

# Set OTA password
ota:
  password: !secret ota_password

# Setup WiFi credentials
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $device_name Fallback
    password: !secret ap_password

captive_portal:

# Set up some global variables for some values that we want to persist
globals:
  - id: wifi_iconstring
    type: std::string
    restore_value: no
    initial_value: '"󰤮"'
  - id: recent_touch
    type: bool
    restore_value: no
    initial_value: "true"

# ============================================================ 
# ESPHome Display related setup
#
# Create a font to use, add and remove glyphs as needed
# The Material Design Icon font is going to be used to display wifi
# state as well as displaying the lightbulb icons
font:
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: mdi_large
    size: 48
    glyphs: [
        "󰛨", # lightbulb-on
        "󰹏", # lightbulb-off
    ]
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: mdi_medium
    size: 24
    glyphs: [
        "󰤮", # no-wifi
        "󰤫", # low-wifi
        "󰤟", # wifi-1
        "󰤢", # wifi-2
        "󰤥", # wifi-3
        "󰤨", # wifi-4
    ]
  - file: 'fonts/Arimo-Regular.ttf'
    id: arimo84
    size: 84
    glyphs: "ABCD"

# Create a Home Assistant blue color
color:
  - id: ha_blue
    hex: 51c0f2

# ============================================================ 
# Home Assistant related setup
#
light:
  - platform: monochromatic
    output: backlight_pwm
    name: Display Backlight
    id: backlight
    restore_mode: ALWAYS_ON
# Set up the LED on the back and turn it off by default
  - platform: rgb
    name: LED
    id: led
    red: output_red
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF

# Setup four binary sensors for the four areas for touch
binary_sensor:
  - platform: touchscreen
    name: Button A
    x_min: 20
    x_max: 100
    y_min: 20
    y_max: 100

  - platform: touchscreen
    name: Button B
    x_min: 20
    x_max: 100
    y_min: 120
    y_max: 200

  - platform: touchscreen
    name: Button C
    x_min: 20
    x_max: 100
    y_min: 220
    y_max: 300

  - platform: touchscreen
    name: Button D
    x_min: 140
    x_max: 220
    y_min: 120
    y_max: 200

# ============================================================ 
# Hardware related setup
#
# Setup SPI for the display. The ESP32-2432S028R uses separate SPI buses for display and touch
spi:
  - id: tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

# Setup a pin to control the backlight and channels for the red/green/blue of the LED on the back
output:
  - platform: ledc
    pin: GPIO21
    id: backlight_pwm
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true

# Setup a script that can update the UI values independent of the display lambda
# so that we're not trying to pull the WiFi signal strength every single frame
script:
  - id: update_ui_values
    then:
    - lambda: |-
        if (isnan(id(wifi_signal_pct).state))
            id(wifi_iconstring) = "󰤮"; // No-wifi
        else if (id(wifi_signal_pct).state < 10)
            id(wifi_iconstring) = "󰤟";  // low-wifi
        else if (id(wifi_signal_pct).state < 30)
            id(wifi_iconstring) = "󰤟"; // wifi-1
        else if (id(wifi_signal_pct).state < 50)
            id(wifi_iconstring) = "󰤢"; // wifi-2
        else if (id(wifi_signal_pct).state < 75)
            id(wifi_iconstring) = "󰤥"; // wifi-3
        else
            id(wifi_iconstring) = "󰤨"; // wifi-4

# Update the UI state every 10 seconds
interval:
  - interval: 10s
    then:
      - script.execute: update_ui_values
    # Every 30 seconds check to see if we had a recent touch and
    # turn off the backlight if we haven't.  This does mean that it 
    # can be up to 60 seconds until the backlight turns off
  - interval: 30s
    then:
      - if:
          condition:
            - lambda: |-
                return !id(recent_touch);
          then: 
            light.turn_off:
              id: backlight
          else:
            - lambda: |-
                id(recent_touch) = false;

# Setup the ili9xxx platform
#
# Display is used as 240x320 by default - no need to rotate it to 90°
#
# We print date and time wth the strftime() function, see the ESPHome documentation to 
# format date and atime to your locale.
#
display:
  - platform: ili9xxx
    model: ili9341
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    rotation: 0
    lambda: |-
      it.fill(id(Color::BLACK));
      it.filled_rectangle(20, 20, 80, 80, id(ha_blue));
      it.filled_rectangle(20, 120, 80, 80, id(ha_blue));
      it.filled_rectangle(20, 220, 80, 80, id(ha_blue));
      it.filled_rectangle(140, 120, 80, 80, id(ha_blue));
      it.print(60, 60, id(arimo84), TextAlign::CENTER, "A");
      it.print(60, 160, id(arimo84), TextAlign::CENTER, "B");
      it.print(60, 260, id(arimo84), TextAlign::CENTER, "C");
      it.print(180, 160, id(arimo84), TextAlign::CENTER, "D");
      it.print(296, 0, id(mdi_medium), id(wifi_iconstring).c_str());

# Set up the xpt2046 touch platform
touchscreen:
  platform: xpt2046
  spi_id: touch
  cs_pin: GPIO33
  interrupt_pin: GPIO36
  update_interval: 50ms
  threshold: 400
  calibration_x_min: 3860
  calibration_x_max: 280
  calibration_y_min: 340
  calibration_y_max: 3860
  transform:
    swap_xy: false      
# When the display is touched, turn on the backlight,
# store that we had a recent touch, and update the UI
  on_touch:
      then:
        - light.turn_on: backlight
        - lambda: |-
            id(recent_touch) = true;
        - script.execute: update_ui_values

# Wifi sensor that drives the UI signal strength icon
sensor:
  - platform: wifi_signal # Reports the WiFi signal strength in %
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    id: wifi_signal_pct
    update_interval: 60s
    entity_category: "diagnostic"
    